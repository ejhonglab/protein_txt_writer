#!/usr/bin/env python3

from pathlib import Path
import re
import shutil


valid_amino_acid_chars = {
    'A',
    'R',
    'N',
    'D',
    'B',
    'C',
    'E',
    'Q',
    'Z',
    'G',
    'H',
    'I',
    'L',
    'K',
    'M',
    'F',
    'P',
    'S',
    'T',
    'W',
    'Y',
    'V',
    # Complicates things a bit
    '-',
}


def remove_whitespace(x: str) -> str:
    return ''.join(x.split())


def main():
    #verbose = False
    verbose = True

    #text = Path('Cuprina_All_ORs_Trevor.txt').read_text()
    text = Path('Cuprina_All_ORs_Revised_For_Code.txt').read_text()

    sections = []
    section_lines = []
    for line in text.splitlines():
        if line.startswith('>'):
            section_lines = []
            sections.append(section_lines)

        section_lines.append(line)

    output_dir = Path('txt')

    if output_dir.exists():
        assert output_dir.is_dir()
        print(f'removing old output directory {output_dir}')
        # So that we don't have files in our output that could have been generated by
        # old runs (and thus misnamed or something).
        shutil.rmtree(output_dir)

    output_dir.mkdir()

    seen_gene_ids = set()
    receptor2count = dict()

    for i, section in enumerate(sections):

        first_protein_line = None
        for j, line in enumerate(section):
            if all(x in valid_amino_acid_chars for x in line.strip()):
                first_protein_line = j
                break

        assert first_protein_line is not None

        #if verbose:
        #    print(f'SECTION {i}')
        #    print('\n'.join(section))

        # 1: is to get rid of the '>' all section headers should start with
        header = '\n'.join(section[:first_protein_line])[1:]

        fname_stem = ''

        gene_id = None
        if header.startswith('XP_'):
            gene_id = header.split()[0]

        elif header.startswith('tr|'):
            gene_id = header.split('|')[1]

        if verbose:
            print(f'{header=}')

        if gene_id is not None:
            gene_id = gene_id.strip()
            gene_id = remove_whitespace(gene_id)
            assert gene_id not in seen_gene_ids
            seen_gene_ids.add(gene_id)
            fname_stem = gene_id

        pattern = 'OR(?:(?:CO)|(?:\d{0,3}[a-z]?))(?:\s|_)?(?:like)?'
        receptors = re.findall(pattern, header)
        assert len(receptors) <= 1

        if len(receptors) == 1:
            receptor = receptors[0]

            # To normalize all '<x> like' to '<x>_like' (seem to have mostly been done
            # manually so far anyway)
            receptor = receptor.replace(' ', '_')

            if verbose:
                print(f'{receptor=}')

            # TODO or do we want to use the manual numbers? so maybe we should just err
            # if we see a duplicate?
            #
            # currently it seems not all things have been manually incremented in the
            # newest edited text file...
            if receptor in receptor2count:
                receptor2count[receptor] += 1
            else:
                receptor2count[receptor] = 0

            count = receptor2count[receptor]
            if count == 0:
                receptor_str = receptor
            else:
                receptor_str = f'{receptor}_{count}'

            if gene_id is None:
                fname_stem = receptor_str
            else:
                fname_stem = f'{fname_stem}_{receptor_str}'

        if verbose:
            print(f'{fname_stem=}')

        protein = '\n'.join(section[first_protein_line:])

        protein = remove_whitespace(protein)

        fname = output_dir / f'{fname_stem}.txt'
        print(f'writing to {fname}')
        output_path = Path(fname)
        assert not output_path.exists()
        output_path.write_text(protein)

        if verbose:
            print()


if __name__ == '__main__':
    main()

